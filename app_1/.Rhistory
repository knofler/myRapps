?sleep
sleep
sleepboxplot = boxplot(data=sleep,extra~group,main="Change in sleep duration",col.main="blue",ylab="change in hrs",xlab="drug")
slices= c(40,30,40)
library(plotrix)
pie(slices,labels="coutries",col=c("red","green","orange"),main="Sales Distribution")
cars
ourData = cars$speed
ourData
hist(ourData)
slices= c(40,30,40)
library(plotrix)
pie(slices,labels="coutries",col=c("red","green","orange"),main="Sales Distribution")
Values = table(Species)
labels = paste(names(Values),mean(Values),"%")
labels
pie3D(Values,labels=labels,main="Species Distribution",col=c("green","blue","red"),explode = 0.10)
pie3D(slices)
attach(sleep)
means = by(extra,group,mean)
points(means,col="blue")
horizontalboxplot = boxplot(data = sleep, extra ~ group,
slices= c(40,30,40)
library(plotrix)
pie(slices,labels="coutries",col=c("red","green","orange"),main="Sales Distribution")
library(shiny)
library(shiny)
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
source('~/Documents/code/myRapps/app_1/ui.R')
library(shiny)
matrix(c(1,2,3,4),nr=2,nc=2,dimnames = list(c("row1","row2"),c("col1","col2")))
crossprod(w)
myList <-list(a=1:10,b=c("tom","jack","rumman"),c=rnorm(100))
newiris = cbind(iris,myfilter)
summary(Species)
list1 <- list(a=c(1:5), b=c(6:10))
list1
rapply(list1, sum)
rapply(list1, sum, how = "unlist")
a= c(TRUE,FALSE,TRUE)
b=c(23,24,54)
list2 = list(a=a,b=b)
rapply(list2,mean,how="unlist")
resultsreplicate <- replicate(3, runif(5))
resultsreplicate
list1 <- list(a=c(1:5), b=c(6:10))
list1
rapply(list1, sum)
rapply(list1, sum, how = "unlist")
a= c(TRUE,FALSE,TRUE)
plot(lynx) # plot for time series data
plot(lynx, type="p", main="Type p") # points (default)
plot(lynx, type="l", main="Type l") # lines (default for time series)
plot(lynx, type="b", main="Type b") # points connected by lines
plot(lynx, type="o", main="Type o") # points overlaid by lines
plot(lynx, type="h", main="Type h") # high density
plot(lynx, type="s", main="Type s") # steps
load(plotrix)
par(mfrow=c(1,1), col.axis="black")
library('plotrix')
plot(1:6, ylab="", main="Line Types lty 1:6", xlab="lty 1:6")
ablineclip(v=1, lty=1, col="sienna2", lwd=2)
ablineclip(v=2, lty=2, col="sienna2", lwd=2)
ablineclip(v=3, lty=3, col="sienna2", lwd=2)
ablineclip(v=4, lty=4, col="sienna2", lwd=2)
ablineclip(v=5, lty=5, col="sienna2", lwd=2)
ablineclip(v=6, lty=6, col="sienna2", lwd=2)
ablineclip(v=7, lty=0, col="sienna2", lwd=2)
plot(lynx) # plot for time series data
plot(lynx, type="p", main="Type p") # points (default)
plot(lynx, type="l", main="Type l") # lines (default for time series)
plot(lynx, type="b", main="Type b") # points connected by lines
plot(lynx, type="o", main="Type o") # points overlaid by lines
plot(lynx, type="h", main="Type h") # high density
plot(lynx, type="s", main="Type s") # steps
plot(lynx, type="n", main="Type n") # no plot
plot(car$speed, type='n')
plot(lynx, main="Heading here",col="red",cex.main=1.5, ylab="Lynx Trappings", xlab="Time",main="LAS = 3",pch=13)
Sepal.data = newData[lenFilter==T,c("Sepal.Width","Species","Petal.Length")]
load(plotrix)
plot(x,y,pch=12)
load(plotrix)
par(mfrow=c(1,1), col.axis="black")
library('plotrix')
plot(1:6, ylab="", main="Line Types lty 1:6", xlab="lty 1:6")
ablineclip(v=1, lty=1, col="sienna2", lwd=2)
ablineclip(v=2, lty=2, col="sienna2", lwd=2)
ablineclip(v=3, lty=3, col="sienna2", lwd=2)
ablineclip(v=4, lty=4, col="sienna2", lwd=2)
ablineclip(v=5, lty=5, col="sienna2", lwd=2)
ablineclip(v=6, lty=6, col="sienna2", lwd=2)
ablineclip(v=7, lty=0, col="sienna2", lwd=2)
plot(lynx) # plot for time series data
# Define server logic required to draw a histogram
# Define server logic required to draw a histogram
library(shiny)
# Define UI for application that draws a histogram
shinyServer(function(input, output) {
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
source('~/Documents/code/myRapps/app_1/ui.R')
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny)
library(shiny)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Hello Shiny!"),
# Sidebar with a slider input for the number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
library(shiny)
library(shiny)
?sleep
sleep
sleepboxplot = boxplot(data=sleep,extra~group,main="Change in sleep duration",col.main="blue",ylab="change in hrs",xlab="drug")
attach(sleep)
means = by(extra,group,mean)
points(means,col="blue")
horizontalboxplot = boxplot(data = sleep, extra ~ group,
ylab="", xlab="", horizontal = T,col = c("blue","yellow"))
?pie
slices= c(40,30,40)
library(plotrix)
pie(slices,labels="coutries",col=c("red","green","orange"),main="Sales Distribution")
?iris
iris
attach(iris)
Values = table(Species)
labels = paste(names(Values),mean(Values),"%")
labels
pie3D(Values,labels=labels,main="Species Distribution",col=c("green","blue","red"),explode = 0.10)
pie3D(slices)
?hist
?cars
cars
ourData = cars$speed
ourData
hist(ourData)
hist(ourData,labels=T,breaks=c(0,5,10,20,30))
hist(ourData,labels=T,breaks=10)
?ylim
hist(ourData,labels=T,ylim = c(0,10),breaks=10)
hey = hist(ourData,breaks=10)
xaxis =seq(min(ourData),max(ourData),length=10)
?dnorm
?mids
?diff
yaxis = dnorm(xaxis,mean=mean(ourData),sd=sd(ourData))
yaxis = yaxis*diff(hey$mids)*length(ourData)
lines(xaxis,yaxis,col="red")
hist(ourData,freq=F,breaks=10)
density(ourData)
lines(density(ourData),col="blue",lwd=4)
hist(ourData)
hist(ourData,labels=T,breaks=c(0,5,10,20,30))
hist(ourData,labels=T,breaks=10)
?ylim
hist(ourData,labels=T,ylim = c(0,10),breaks=10)
hey = hist(ourData,breaks=10)
xaxis =seq(min(ourData),max(ourData),length=10)
?dnorm
?mids
?diff
yaxis = dnorm(xaxis,mean=mean(ourData),sd=sd(ourData))
yaxis = yaxis*diff(hey$mids)*length(ourData)
lines(xaxis,yaxis,col="red")
hist(ourData,freq=F,breaks=10)
hey = hist(ourData,breaks=10)
xaxis =seq(min(ourData),max(ourData),length=10)
?dnorm
?mids
?diff
yaxis = dnorm(xaxis,mean=mean(ourData),sd=sd(ourData))
yaxis = yaxis*diff(hey$mids)*length(ourData)
lines(xaxis,yaxis,col="red")
hist(ourData,freq=F,breaks=10)
density(ourData)
lines(density(ourData),col="blue",lwd=4)
hey = hist(ourData,breaks=10)
xaxis =seq(min(ourData),max(ourData),length=10)
?dnorm
?mids
?diff
yaxis = dnorm(xaxis,mean=mean(ourData),sd=sd(ourData))
yaxis = yaxis*diff(hey$mids)*length(ourData)
lines(xaxis,yaxis,col="red")
hist(ourData,freq=F,breaks=10)
density(ourData)
lines(density(ourData),col="blue",lwd=4)
density(ourData)
lines(density(ourData),col="blue",lwd=4)
hist(ourData,freq=F,breaks=10)
setwd("~/Documents/code/myRapps/app_1")
library(shiny)
install.packages(c("boot", "codetools", "lattice", "manipulate", "MASS", "Matrix", "mgcv"))
install.packages("shiny")
install.packages("tm")
install.packages("twitteR")
library(shiny)
shinyServer(function(input, output) {
library(shiny)
# Define server logic required to draw a histogram
shinyServer(function(input, output) {
# Expression that generates a histogram. The expression is
# wrapped in a call to renderPlot to indicate that:
#
#  1) It is "reactive" and therefore should re-execute automatically
#     when inputs change
#  2) Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful[, 2]  # Old Faithful Geyser data
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
})
library(shiny)
install.packages("shiny")
install.packages("shiny")
library(shiny)
runApp("my_app")
setwd("~/Documents/code/myRapps")
runApp("app_1")
runApp("app_1")
library(shiny)
